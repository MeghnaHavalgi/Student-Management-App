/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import model.User;
import model.UserList;
import java.util.ArrayList;

/**
 *
 * @author meghnahavalgi
 */
public class AdminViewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form temp
     */
    UserList ulist;
    public AdminViewJPanel(UserList ulist) {
        initComponents();
        this.ulist = ulist;
        listpersons();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblAdmin = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPersons = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        lblCredentials = new javax.swing.JLabel();
        lblUsername = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        lblNUID = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        btnUpdateCred = new javax.swing.JButton();
        txtPasswordField = new javax.swing.JPasswordField();

        setBackground(new java.awt.Color(204, 204, 255));

        lblAdmin.setBackground(new java.awt.Color(255, 204, 255));
        lblAdmin.setFont(new java.awt.Font("Helvetica", 1, 18)); // NOI18N
        lblAdmin.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAdmin.setText("ADMIN ");

        tblPersons.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "NUID", "FIRST NAME", "LAST NAME", "STATUS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPersons.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPersonsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblPersons);
        if (tblPersons.getColumnModel().getColumnCount() > 0) {
            tblPersons.getColumnModel().getColumn(0).setResizable(false);
            tblPersons.getColumnModel().getColumn(1).setResizable(false);
            tblPersons.getColumnModel().getColumn(2).setResizable(false);
            tblPersons.getColumnModel().getColumn(3).setResizable(false);
        }

        btnSearch.setBackground(new java.awt.Color(255, 255, 204));
        btnSearch.setFont(new java.awt.Font("Helvetica", 1, 14)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(255, 255, 204));
        btnUpdate.setFont(new java.awt.Font("Helvetica", 1, 14)); // NOI18N
        btnUpdate.setText("Update Information");
        btnUpdate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        lblCredentials.setFont(new java.awt.Font("Helvetica", 1, 16)); // NOI18N
        lblCredentials.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCredentials.setText("UPDATE ");

        lblUsername.setText("Username :");

        lblPassword.setText("Password :");

        lblNUID.setText("NUID :");

        btnUpdateCred.setBackground(new java.awt.Color(255, 255, 204));
        btnUpdateCred.setFont(new java.awt.Font("Helvetica", 1, 14)); // NOI18N
        btnUpdateCred.setText("Update Credentails");
        btnUpdateCred.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnUpdateCred.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateCredActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAdmin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(291, 291, 291)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblPassword)
                            .addComponent(lblNUID)
                            .addComponent(lblUsername))
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtUsername, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                            .addComponent(txtPasswordField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtId))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 847, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(242, 242, 242)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCredentials, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(340, 340, 340)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnUpdateCred, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(345, 345, 345))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(lblAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtSearch)
                    .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(17, 17, 17)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblCredentials, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNUID)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsername)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword)
                    .addComponent(txtPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnUpdateCred, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                .addGap(14, 14, 14))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
//        DefaultTableModel search_model = (DefaultTableModel) tblPersons.getModel();
//        TableRowSorter<DefaultTableModel> tblsorter = new TableRowSorter<>(search_model);
//        tblPersons.setRowSorter(tblsorter);
//        tblsorter.setRowFilter(RowFilter.regexFilter(txtSearch.getText()));
//
//        // TODO add your handling code here:
        var searchTerm = txtSearch.getText();
//        if(searchTerm.matches("^\\d+(\\.\\d+"))
         for (char c : searchTerm.toCharArray()) {
         if (!Character.isDigit(c)){
            JOptionPane.showMessageDialog(this, "Please choose NUID");
            return;
    }
}
        var res = ulist.getSearchResults(searchTerm);
        populate(res);
//    }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:

    int selectedRowIndex = tblPersons.getSelectedRow(); 

        if (selectedRowIndex >= 0) {
            
            int selectedUserId = getSelectedUserId(); 
            User selectedUser = ulist.getUserById(selectedUserId);

            if (selectedUser != null) {
                
                String firstName = (String) tblPersons.getValueAt(selectedRowIndex, 1);
                String lastName = (String) tblPersons.getValueAt(selectedRowIndex, 2);
                boolean status = (boolean) tblPersons.getValueAt(selectedRowIndex, 3);
                

                selectedUser.setFname(firstName);
                selectedUser.setLname(lastName);
                selectedUser.setStatus(status);

                listpersons(); // After updating the User object, refreshing the table with the new data
            } else {
                JOptionPane.showMessageDialog(this, "Selected user not found.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to update.");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void tblPersonsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPersonsMouseClicked
        // TODO add your handling code here:
       int userid = getSelectedUserId();
       txtId.setText(String.valueOf(userid));
       
       
    }//GEN-LAST:event_tblPersonsMouseClicked

    private void btnUpdateCredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateCredActionPerformed
        // TODO add your handling code here:
      int nuid = Integer.parseInt(txtId.getText()); 
      String newUsername = txtUsername.getText();
      String newPassword = new String(txtPasswordField.getPassword()); 

    if (!newUsername.isEmpty() && !newPassword.isEmpty()) {
        User selectedUser = ulist.getUserById(nuid); // Get the selected user
        if (selectedUser != null) {
            String lastUsedPassword = selectedUser.getLastUsedPassword();
            if (!newPassword.equals(lastUsedPassword)) {
                // Passwords do not match the last used password, so update credentials
                ulist.updateUsernameAndPassword(nuid, newUsername, newPassword);
                listpersons(); // Update the table with the new credentials
                JOptionPane.showMessageDialog(this, "Credentials updated successfully.");
            } else {
                // Password matches the last used password, show a prompt
                int confirm = JOptionPane.showConfirmDialog(this, "The new password matches the last used password. Are you sure you want to continue?", "Confirm Password Match", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    // User confirmed to update credentials despite the matching password
                    ulist.updateUsernameAndPassword(nuid, newUsername, newPassword);
                    listpersons(); // Update the table with the new credentials
                    JOptionPane.showMessageDialog(this, "Credentials updated successfully.");
                } else {
                    // User chose not to update credentials
                    JOptionPane.showMessageDialog(this, "Credentials not updated.");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selected user not found.");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please enter both username and password.");
    }
    }//GEN-LAST:event_btnUpdateCredActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnUpdateCred;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAdmin;
    private javax.swing.JLabel lblCredentials;
    private javax.swing.JLabel lblNUID;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JTable tblPersons;
    private javax.swing.JTextField txtId;
    private javax.swing.JPasswordField txtPasswordField;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

        public void listpersons(){
    
        DefaultTableModel model = (DefaultTableModel) tblPersons.getModel();
        model.setRowCount(0);
        
        for (User user : ulist.getAllUsers()){
        
            Object[] row = new Object[4];
            row[0] = user.getId();
            row[1] = user.getFname();
            row[2] = user.getLname();
            row[3] = user.getStatus();
            
            model.addRow(row);
                    
        }
    }
        private void populate(ArrayList<User> a) {
         DefaultTableModel model = (DefaultTableModel) tblPersons.getModel();
         model.setRowCount(0);
         for(User u: a){
               Object row[] = new Object[4];
               row[0] = u.getId();
               row[1] = u.getFname();
               row[2] = u.getLname();
               row[3] = u.getStatus();
               model.addRow(row); 
        }
    }
        
    private int getSelectedUserId() {
        int selectedRowIndex = tblPersons.getSelectedRow();

    if (selectedRowIndex >= 0) {
        DefaultTableModel model = (DefaultTableModel) tblPersons.getModel();
        return (int) model.getValueAt(selectedRowIndex, 0);
    } else {
        
        return -1; //to indicate that no row has been selected
    }
}
}
